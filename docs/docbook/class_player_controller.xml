<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_player_controller" xml:lang="en-US">
<title>PlayerController Class Reference</title>
<indexterm><primary>PlayerController</primary></indexterm>
<para>

<para>Responsible for reading input and calling appropriate events  </para>
 
</para>
<para>
<computeroutput>#include &lt;PlayerController.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_player_controller_1a6be0ad925daf5880250ef87881eedbf6">PlayerController</link> (gef::Platform &amp;platform)</para>
</listitem>
            <listitem><para>gef::Vector2 <link linkend="_class_player_controller_1a3cf1cb2523e6b8a78cdbaf9df577b3be">GetMousePosition</link> ()</para>

<para>Gets the mouse Position  </para>
</listitem>
            <listitem><para>bool <link linkend="_class_player_controller_1a3ecff75f943f340bce2240d58eaf7f4f">BindKeyboardEvent</link> (const <link linkend="_struct_f_key_bind_keyboard">FKeyBindKeyboard</link> keyboardEvent, bool bUnique=false, bool bReplaceIfUnique=false)</para>

<para>Binds a keyboard event to this player controller  </para>
</listitem>
            <listitem><para>bool <link linkend="_class_player_controller_1a3b4ce10a473a2000d1b204c7830bff97">BindControllerEvent</link> (const <link linkend="_struct_f_key_bind_controller">FKeyBindController</link> controllerEvent, bool bUnique=false, bool bReplaceIfUnique=false)</para>

<para>Binds a controller event to this player controller  </para>
</listitem>
            <listitem><para>bool <link linkend="_class_player_controller_1a654bf416ea31cbe022ccc50c7e1832e8">BindMouseEvent</link> (const <link linkend="_struct_f_key_bind_mouse">FKeyBindMouse</link> mouseEvent)</para>

<para>Binds a mouse event to this player controller  </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_controller_1a92f0d14a05056e6296fc726fc7073410">BindKeyBindSet</link> (<link linkend="_struct_f_key_bind_set">FKeyBindSet</link> keyBindSet)</para>

<para>Binds a full key bind set and removes ALL previous key binds  </para>
</listitem>
            <listitem><para>void <link linkend="_class_player_controller_1a2e0c380d64a88c8cfe60ce8452921227">Update</link> ()</para>

<para>Updates the player controller and processes input  </para>
</listitem>
            <listitem><para>const <link linkend="_struct_f_key_bind_set">FKeyBindSet</link> &amp; <link linkend="_class_player_controller_1ac23282a33a9bfc6972828f0ce385a52b">GetKeybindSet</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Responsible for reading input and calling appropriate events  </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_player_controller_1a6be0ad925daf5880250ef87881eedbf6"/><section>
    <title>PlayerController()</title>
<indexterm><primary>PlayerController</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>PlayerController</secondary></indexterm>
<para><computeroutput>PlayerController::PlayerController (gef::Platform &amp; platform)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_player_controller_1a3b4ce10a473a2000d1b204c7830bff97"/><section>
    <title>BindControllerEvent()</title>
<indexterm><primary>BindControllerEvent</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>BindControllerEvent</secondary></indexterm>
<para><computeroutput>bool PlayerController::BindControllerEvent (const <link linkend="_struct_f_key_bind_controller">FKeyBindController</link> controllerEvent, bool bUnique = <computeroutput>false</computeroutput>
, bool bReplaceIfUnique = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Binds a controller event to this player controller  </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>controllerEvent</entry><entry>
<para>The event to be bound</para>
</entry>
                            </row>
                            <row>
<entry>bUnique</entry><entry>
<para>Should the event be unique, i.e. no other events bound to the same key</para>
</entry>
                            </row>
                            <row>
<entry>bReplaceIfUnique</entry><entry>
<para>Should we replace if the event is not unique</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True, if the event was successfully bound</para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_player_controller_1a92f0d14a05056e6296fc726fc7073410"/><section>
    <title>BindKeyBindSet()</title>
<indexterm><primary>BindKeyBindSet</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>BindKeyBindSet</secondary></indexterm>
<para><computeroutput>void PlayerController::BindKeyBindSet (<link linkend="_struct_f_key_bind_set">FKeyBindSet</link> keyBindSet)</computeroutput></para><para>

<para>Binds a full key bind set and removes ALL previous key binds  </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>keyBindSet</entry><entry>
<para>The key bind set to be bound</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_player_controller_1a3ecff75f943f340bce2240d58eaf7f4f"/><section>
    <title>BindKeyboardEvent()</title>
<indexterm><primary>BindKeyboardEvent</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>BindKeyboardEvent</secondary></indexterm>
<para><computeroutput>bool PlayerController::BindKeyboardEvent (const <link linkend="_struct_f_key_bind_keyboard">FKeyBindKeyboard</link> keyboardEvent, bool bUnique = <computeroutput>false</computeroutput>
, bool bReplaceIfUnique = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Binds a keyboard event to this player controller  </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>keyboardEvent</entry><entry>
<para>The event to be bound</para>
</entry>
                            </row>
                            <row>
<entry>bUnique</entry><entry>
<para>Should the event be unique, i.e. no other events bound to the same key</para>
</entry>
                            </row>
                            <row>
<entry>bReplaceIfUnique</entry><entry>
<para>Should we replace if the event is not unique</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True, if the event was successfully bound</para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_player_controller_1a654bf416ea31cbe022ccc50c7e1832e8"/><section>
    <title>BindMouseEvent()</title>
<indexterm><primary>BindMouseEvent</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>BindMouseEvent</secondary></indexterm>
<para><computeroutput>bool PlayerController::BindMouseEvent (const <link linkend="_struct_f_key_bind_mouse">FKeyBindMouse</link> mouseEvent)</computeroutput></para><para>

<para>Binds a mouse event to this player controller  </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mouseEvent</entry><entry>
<para>The event to be bound</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>True, if the event was successfully bound</para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_player_controller_1ac23282a33a9bfc6972828f0ce385a52b"/><section>
    <title>GetKeybindSet()</title>
<indexterm><primary>GetKeybindSet</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>GetKeybindSet</secondary></indexterm>
<para><computeroutput>const <link linkend="_struct_f_key_bind_set">FKeyBindSet</link> &amp; PlayerController::GetKeybindSet ( ) const</computeroutput></para></section>
<anchor xml:id="_class_player_controller_1a3cf1cb2523e6b8a78cdbaf9df577b3be"/><section>
    <title>GetMousePosition()</title>
<indexterm><primary>GetMousePosition</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>GetMousePosition</secondary></indexterm>
<para><computeroutput>gef::Vector2 PlayerController::GetMousePosition ( )</computeroutput></para><para>

<para>Gets the mouse Position  </para>
</para>

<para><formalpara><title>Returns</title>

<para>The mouse position on the screen</para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_player_controller_1a2e0c380d64a88c8cfe60ce8452921227"/><section>
    <title>Update()</title>
<indexterm><primary>Update</primary><secondary>PlayerController</secondary></indexterm>
<indexterm><primary>PlayerController</primary><secondary>Update</secondary></indexterm>
<para><computeroutput>void PlayerController::Update ( )</computeroutput></para><para>

<para>Updates the player controller and processes input  </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
D:/Uni/CMP208/Hellwatch/build/vs2017/GameFramework/<link linkend="__player_controller_8h">PlayerController.h</link>D:/Uni/CMP208/Hellwatch/build/vs2017/GameFramework/<link linkend="__player_controller_8cpp">PlayerController.cpp</link></section>
</section>
